syntax = "proto3";

package cs739;

service AFS {
  rpc GetAttr(Filepath) returns(Meta);
  rpc GetContent(Filepath) returns(stream MetaContent);
  rpc Ls(Filepath) returns(LsResult);
  rpc Write(stream FilepathContent) returns(Meta);
  rpc Stat(Filepath) returns(StatContent);
  rpc Unlink(Filepath) returns(Response);
  rpc Rmdir(Filepath) returns(Response);
  rpc Mkdir(Filepath) returns(Response);
}

message Filepath {
  string filepath = 1;
}

message Meta {
  bool file_exists = 1;
  bytes timestamp = 2; // save struct stat.st_mtim
}

message FilepathContent {
  string filepath = 1; // for a Write() call, filepath should always be same
  bytes b = 2;
}

message MetaContent {
  bool file_exists = 1;
  bytes timestamp = 2; // save struct stat.st_mtim
  bytes b = 3;
}

message LsResult {
  repeated string d_name = 1;
}

// struct stat {
//            dev_t     st_dev;         /* ID of device containing file */
//            ino_t     st_ino;         /* Inode number */
//            mode_t    st_mode;        /* File type and mode */
//            nlink_t   st_nlink;       /* Number of hard links */
//            uid_t     st_uid;         /* User ID of owner */
//            gid_t     st_gid;         /* Group ID of owner */
//            dev_t     st_rdev;        /* Device ID (if special file) */
//            off_t     st_size;        /* Total size, in bytes */
//            blksize_t st_blksize;     /* Block size for filesystem I/O */
//            blkcnt_t  st_blocks;      /* Number of 512B blocks allocated *
//            /* Since Linux 2.6, the kernel supports nanosecond
//               precision for the following timestamp fields.
//               For the details before Linux 2.6, see NOTES. *
//            struct timespec st_atim;  /* Time of last access */
//            struct timespec st_mtim;  /* Time of last modification */
//            struct timespec st_ctim;  /* Time of last status change *
//        #define st_atime st_atim.tv_sec      /* Backward compatibility */
//        #define st_mtime st_mtim.tv_sec
//        #define st_ctime st_ctim.tv_sec
//        };

message StatContent {
  int32 return_code = 1;
  int32 error_number = 2;
  
  uint64 st_dev = 3;
  uint64 st_ino = 4;
  uint64 st_mode = 5;
  uint64 st_nlink = 6;
  uint64 st_uid = 7;
  uint64 st_gid = 8;
  uint64 st_rdev = 9;
  int64 st_size = 10;
  int64 st_blksize = 11;
  int64 st_blocks = 12;
  bytes  st_atim = 13;
  bytes  st_mtim = 14;
  bytes  st_ctim = 15;
}

message Response {
  int32 return_code = 1;
  int32 error_number = 2;
}
